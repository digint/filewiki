#!/usr/bin/perl

=head1 NAME

filewiki - FileWiki command line tool

=head1 SYNOPSIS

    filewiki --help

    filewiki example.org
    filewiki -c install example.org URI_PREFIX=/testsite

=head1 DESCRIPTION

Create a web site using the FileWiki perl module.

The full FileWiki documentation is available at L<https://digint.ch/filewiki>.

=head1 AUTHOR

Axel Burri <axel@tty0.ch>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2011-2019 Axel Burri. All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut


use strict;
use warnings FATAL => qw( all );

use FileWiki;
use FileWiki::Logger;
use Getopt::Std;

our $VERSION = "0.53";

my $version_info = "filewiki command line client, version $VERSION (FileWiki module version: $FileWiki::VERSION)";
my $filewiki_home = '<https://digint.ch/filewiki>';


sub VERSION_MESSAGE
{
  print STDERR $version_info . "\n\n";
}

sub HELP_MESSAGE
{
  print STDERR "usage: filewiki [options] [basedir] [key=value...]\n";
  print STDERR "\n";
  print STDERR "options:\n";
  print STDERR "   -h, --help  display this help message\n";
  print STDERR "   --version   display version information\n";
  print STDERR "   -c COMMAND  run command from config after create\n";
  print STDERR "   -s          print site map (don't create output)\n";
  print STDERR "   -v          be verbose (enable info logging level)\n";
  print STDERR "   -d          enable debug log\n";
  print STDERR "   -l LEVEL    set the logging level [0..4]\n";
  print STDERR "\n";
  print STDERR "For additional information, see $filewiki_home\n";
}

$Getopt::Std::STANDARD_HELP_VERSION = 1;
$FileWiki::Logger::loglevel = $FileWiki::Logger::level{warn}; # set default loglevel to warn

my %opts;
getopts('hc:l:svd', \%opts);

if($opts{h}) {
  VERSION_MESSAGE();
  HELP_MESSAGE(0);
  exit 0;
}

$FileWiki::Logger::loglevel = $FileWiki::Logger::level{info} if(defined $opts{v});
$FileWiki::Logger::loglevel = $FileWiki::Logger::level{debug} if(defined $opts{d});
$FileWiki::Logger::loglevel = exists($FileWiki::Logger::level{$opts{l}}) ? $FileWiki::Logger::level{$opts{l}} : $opts{l} if(defined $opts{l});

# read "key=value" arguments
my %vars;
$vars{BASEDIR} = $ARGV[0] if(defined($ARGV[0]) && not ($ARGV[0] =~ m/^(\S+?)=(\S+)$/));
foreach my $var (@ARGV) {
  $vars{$1} = $2 if($var =~ m/^(\S+?)=(\S+)$/);
}

unless($vars{BASEDIR}) {
  print STDERR "Error: no BASEDIR provided\n";
  HELP_MESSAGE();
  exit 1;
}

INFO $version_info;
TRACE "$0: vars passed to FileWiki:"; INDENT 1;
TRACE FileWiki::dump_vars(\%vars); INDENT -1;

my $exitcode = 0;
my $start_time = time;
my $filewiki = FileWiki->new(%vars);

if($opts{s}) {
  my $sitemap = $filewiki->sitemap();
  print "Sitemap:\n";
  print $sitemap;
  print "\n";
}
else {
  my $ret = $filewiki->create();
  my $npages = @{$ret->{page_files}};
  my $nresources = @{$ret->{resource_files}};
  print "Created $npages pages";
  print " and $nresources resource files" if($nresources);
  print ".\n";

  if($opts{c}) {
    my ($err, $msg, $output) = $filewiki->command($opts{c});
    print "Command \"$opts{c}\" " . ($err ? "failed: $msg" : "executed.") . "\n";
    $exitcode = 1 if($err);
  }
}

INFO "Time elapsed: " . (time - $start_time) . "s";
exit $exitcode;

1;
